                        .module USART_Operate.c
                        .area text(rom, con, rel)
 0000                   .dbfile USART_Operate.c
 0000                   .dbfile F:\工作\单片机\WorkSpace\AccessControlSystem\USART_Operate.c
 0000                   .dbfunc e USART0_Transmit _USART0_Transmit fV
 0000           ;           data -> R16
                        .even
 0000           _USART0_Transmit::
 0000                   .dbline -1
 0000                   .dbline 11
 0000           ; //USART_Operate.c
 0000           ; 
 0000           ; #include <iom128v.h>
 0000           ; #include "USART_Operate.h"
 0000           ; #include "DeviceInitialize.h"
 0000           ; 
 0000           ; /*-------------------- USART0 --------------------*/
 0000           ; 
 0000           ; //USART0以5到8个数据位的方式发送帧
 0000           ; void USART0_Transmit(unsigned char data)
 0000           ; {
 0000           L2:
 0000                   .dbline 12
 0000           ;       while(!(UCSR0A & (1<<UDRE0))); //等待发送缓冲器为空
 0000           L3:
 0000                   .dbline 12
 0000 5D9B              sbis 0xb,5
 0002 FECF              rjmp L2
 0004           X0:
 0004                   .dbline 13
 0004           ;       UDR0 = data; //将数据放入缓冲器, 发送数据
 0004 0CB9              out 0xc,R16
 0006                   .dbline -2
 0006           L1:
 0006                   .dbline 0 ; func end
 0006 0895              ret
 0008                   .dbsym r data 16 c
 0008                   .dbend
 0008                   .dbfunc e USART0_Transmit_9bits _USART0_Transmit_9bits fV
 0008           ;           data -> R16,R17
                        .even
 0008           _USART0_Transmit_9bits::
 0008                   .dbline -1
 0008                   .dbline 18
 0008           ; }
 0008           ; 
 0008           ; //USART0以9个数据位的方式发送帧
 0008           ; void USART0_Transmit_9bits(unsigned int data)
 0008           ; {
 0008           L6:
 0008                   .dbline 19
 0008           ;       while(!(UCSR0A & (1<<UDRE0))); //等待发送缓冲器为空
 0008           L7:
 0008                   .dbline 19
 0008 5D9B              sbis 0xb,5
 000A FECF              rjmp L6
 000C           X1:
 000C                   .dbline 20
 000C           ;       UCSR0B &= ~(1<<TXB80); //将第9位复制到TXB8
 000C 5098              cbi 0xa,0
 000E                   .dbline 21
 000E           ;       if(data & 0x0100)
 000E 10FF              sbrs R17,0
 0010 01C0              rjmp L9
 0012           X2:
 0012                   .dbline 22
 0012           ;               UCSR0B |= (1<<TXB80);
 0012 509A              sbi 0xa,0
 0014           L9:
 0014                   .dbline 23
 0014           ;       UDR0 = data; //将数据放入缓冲器, 发送数据
 0014 0CB9              out 0xc,R16
 0016                   .dbline -2
 0016           L5:
 0016                   .dbline 0 ; func end
 0016 0895              ret
 0018                   .dbsym r data 16 i
 0018                   .dbend
 0018                   .dbfunc e USART0_Receive _USART0_Receive fc
                        .even
 0018           _USART0_Receive::
 0018                   .dbline -1
 0018                   .dbline 28
 0018           ; }
 0018           ; 
 0018           ; //USART0以5到8个数据位的方式接收帧
 0018           ; unsigned char USART0_Receive(void)
 0018           ; {
 0018           L12:
 0018                   .dbline 29
 0018           ;       while(!(UCSR0A & (1<<RXC0))); //等待接收数据
 0018           L13:
 0018                   .dbline 29
 0018 5F9B              sbis 0xb,7
 001A FECF              rjmp L12
 001C           X3:
 001C                   .dbline 30
 001C           ;       return UDR0; //从缓冲器中获取并返回数据
 001C 0CB1              in R16,0xc
 001E                   .dbline -2
 001E           L11:
 001E                   .dbline 0 ; func end
 001E 0895              ret
 0020                   .dbend
 0020                   .dbfunc e USART0_Receive_9bits _USART0_Receive_9bits fi
 0020           ;           resl -> R18
 0020           ;         status -> R20
 0020           ;           resh -> R16
                        .even
 0020           _USART0_Receive_9bits::
 0020 4A93              st -y,R20
 0022                   .dbline -1
 0022                   .dbline 35
 0022           ; }
 0022           ; 
 0022           ; //USART0以9个数据位的方式接收帧
 0022           ; unsigned int USART0_Receive_9bits(void)
 0022           ; {
 0022           L16:
 0022                   .dbline 38
 0022           ;       unsigned char status, resh, resl;
 0022           ; 
 0022           ;       while(!(UCSR0A & (1<<RXC0))); //等待接收数据
 0022           L17:
 0022                   .dbline 38
 0022 5F9B              sbis 0xb,7
 0024 FECF              rjmp L16
 0026           X4:
 0026                   .dbline 39
 0026           ;       status = UCSR0A; //从缓冲器中获得状态、第9位及数据
 0026 4BB1              in R20,0xb
 0028                   .dbline 40
 0028           ;       resh = UCSR0B;
 0028 0AB1              in R16,0xa
 002A                   .dbline 41
 002A           ;       resl = UDR0;
 002A 2CB1              in R18,0xc
 002C                   .dbline 42
 002C           ;       if(status & (1<<FE0) | (1<<DOR0) | (1<<UPE0)) //如果出错, 返回-1
 002C 842F              mov R24,R20
 002E 8071              andi R24,16
 0030 8C60              ori R24,12
 0032 19F0              breq L19
 0034           X5:
 0034                   .dbline 43
 0034           ;               return -1;
 0034 0FEF              ldi R16,65535
 0036 1FEF              ldi R17,255
 0038 04C0              xjmp L15
 003A           L19:
 003A                   .dbline 44
 003A           ;       resh = (resh >> 1) & 0x01; //过滤第9位数据, 然后返回
 003A 0695              lsr R16
 003C 0170              andi R16,1
 003E                   .dbline 45
 003E           ;       return ((resh << 8) | resl);
 003E 102F              mov R17,R16
 0040 022F              mov R16,R18
 0042                   .dbline -2
 0042           L15:
 0042                   .dbline 0 ; func end
 0042 4991              ld R20,y+
 0044 0895              ret
 0046                   .dbsym r resl 18 c
 0046                   .dbsym r status 20 c
 0046                   .dbsym r resh 16 c
 0046                   .dbend
 0046                   .dbfunc e USART0_Transmit_String _USART0_Transmit_String fV
 0046           ;              p -> R20,R21
                        .even
 0046           _USART0_Transmit_String::
 0046 4A93              st -y,R20
 0048 5A93              st -y,R21
 004A A801              movw R20,R16
 004C                   .dbline -1
 004C                   .dbline 50
 004C           ; }
 004C           ; 
 004C           ; //USART0以5到8个数据位的方式发送字符串
 004C           ; void USART0_Transmit_String(unsigned char *p)
 004C           ; {
 004C 05C0              xjmp L23
 004E           L22:
 004E                   .dbline 52
 004E           ;     while(*p)
 004E           ;     {
 004E                   .dbline 53
 004E           ;         USART0_Transmit(*p);
 004E FA01              movw R30,R20
 0050 0081              ldd R16,z+0
 0052 D6DF              xcall _USART0_Transmit
 0054                   .dbline 54
 0054           ;         p++;
 0054 4F5F              subi R20,255  ; offset = 1
 0056 5F4F              sbci R21,255
 0058                   .dbline 55
 0058           ;     }
 0058           L23:
 0058                   .dbline 51
 0058 FA01              movw R30,R20
 005A 2080              ldd R2,z+0
 005C 2220              tst R2
 005E B9F7              brne L22
 0060           X6:
 0060                   .dbline -2
 0060           L21:
 0060                   .dbline 0 ; func end
 0060 5991              ld R21,y+
 0062 4991              ld R20,y+
 0064 0895              ret
 0066                   .dbsym r p 20 pc
 0066                   .dbend
 0066                   .dbfunc e USART0_Flush _USART0_Flush fV
 0066           ;          dummy -> R16
                        .even
 0066           _USART0_Flush::
 0066                   .dbline -1
 0066                   .dbline 60
 0066           ; }
 0066           ; 
 0066           ; //USART0刷新接收缓冲器
 0066           ; void USART0_Flush(void)
 0066           ; {
 0066 01C0              xjmp L27
 0068           L26:
 0068                   .dbline 63
 0068           ;       unsigned char dummy;
 0068           ;       while(UCSR0A & (1<<RXC0))
 0068           ;               dummy = UDR0;
 0068 0CB1              in R16,0xc
 006A           L27:
 006A                   .dbline 62
 006A 5F99              sbic 0xb,7
 006C FDCF              rjmp L26
 006E           X7:
 006E                   .dbline -2
 006E           L25:
 006E                   .dbline 0 ; func end
 006E 0895              ret
 0070                   .dbsym r dummy 16 c
 0070                   .dbend
 0070                   .dbfunc e USART1_Transmit _USART1_Transmit fV
 0070           ;           data -> R16
                        .even
 0070           _USART1_Transmit::
 0070                   .dbline -1
 0070                   .dbline 70
 0070           ; }
 0070           ; 
 0070           ; /*-------------------- USART1 --------------------*/
 0070           ; 
 0070           ; //USART1以5到8个数据位的方式发送帧
 0070           ; void USART1_Transmit(unsigned char data)
 0070           ; {
 0070           L30:
 0070                   .dbline 71
 0070           ;       while(!(UCSR1A & (1<<UDRE1))); //等待发送缓冲器为空
 0070           L31:
 0070                   .dbline 71
 0070 20909B00          lds R2,155
 0074 25FE              sbrs R2,5
 0076 FCCF              rjmp L30
 0078           X8:
 0078                   .dbline 72
 0078           ;       UDR1 = data; //将数据放入缓冲器, 发送数据
 0078 00939C00          sts 156,R16
 007C                   .dbline -2
 007C           L29:
 007C                   .dbline 0 ; func end
 007C 0895              ret
 007E                   .dbsym r data 16 c
 007E                   .dbend
 007E                   .dbfunc e USART1_Transmit_9bits _USART1_Transmit_9bits fV
 007E           ;           data -> R16,R17
                        .even
 007E           _USART1_Transmit_9bits::
 007E                   .dbline -1
 007E                   .dbline 77
 007E           ; }
 007E           ; 
 007E           ; //USART1以9个数据位的方式发送帧
 007E           ; void USART1_Transmit_9bits(unsigned int data)
 007E           ; {
 007E           L34:
 007E                   .dbline 78
 007E           ;       while(!(UCSR1A & (1<<UDRE1))); //等待发送缓冲器为空
 007E           L35:
 007E                   .dbline 78
 007E 20909B00          lds R2,155
 0082 25FE              sbrs R2,5
 0084 FCCF              rjmp L34
 0086           X9:
 0086                   .dbline 79
 0086           ;       UCSR1B &= ~(1<<TXB81); //将第9位复制到TXB8
 0086 80919A00          lds R24,154
 008A 8E7F              andi R24,254
 008C 80939A00          sts 154,R24
 0090                   .dbline 80
 0090           ;       if(data & 0x0100)
 0090 10FF              sbrs R17,0
 0092 05C0              rjmp L37
 0094           X10:
 0094                   .dbline 81
 0094           ;               UCSR1B |= (1<<TXB81);
 0094 80919A00          lds R24,154
 0098 8160              ori R24,1
 009A 80939A00          sts 154,R24
 009E           L37:
 009E                   .dbline 82
 009E           ;       UDR1 = data; //将数据放入缓冲器, 发送数据
 009E 00939C00          sts 156,R16
 00A2                   .dbline -2
 00A2           L33:
 00A2                   .dbline 0 ; func end
 00A2 0895              ret
 00A4                   .dbsym r data 16 i
 00A4                   .dbend
 00A4                   .dbfunc e USART1_Receive _USART1_Receive fc
                        .even
 00A4           _USART1_Receive::
 00A4                   .dbline -1
 00A4                   .dbline 87
 00A4           ; }
 00A4           ; 
 00A4           ; //USART1以5到8个数据位的方式接收帧
 00A4           ; unsigned char USART1_Receive(void)
 00A4           ; {
 00A4           L40:
 00A4                   .dbline 88
 00A4           ;       while(!(UCSR1A & (1<<RXC1))); //等待接收数据
 00A4           L41:
 00A4                   .dbline 88
 00A4 20909B00          lds R2,155
 00A8 27FE              sbrs R2,7
 00AA FCCF              rjmp L40
 00AC           X11:
 00AC                   .dbline 89
 00AC           ;       return UDR1; //从缓冲器中获取并返回数据
 00AC 00919C00          lds R16,156
 00B0                   .dbline -2
 00B0           L39:
 00B0                   .dbline 0 ; func end
 00B0 0895              ret
 00B2                   .dbend
 00B2                   .dbfunc e USART1_Receive_9bits _USART1_Receive_9bits fi
 00B2           ;           resl -> R18
 00B2           ;         status -> R20
 00B2           ;           resh -> R16
                        .even
 00B2           _USART1_Receive_9bits::
 00B2 4A93              st -y,R20
 00B4                   .dbline -1
 00B4                   .dbline 94
 00B4           ; }
 00B4           ; 
 00B4           ; //USART1以9个数据位的方式接收帧
 00B4           ; unsigned int USART1_Receive_9bits(void)
 00B4           ; {
 00B4           L44:
 00B4                   .dbline 97
 00B4           ;       unsigned char status, resh, resl;
 00B4           ; 
 00B4           ;       while(!(UCSR1A & (1<<RXC1))); //等待接收数据
 00B4           L45:
 00B4                   .dbline 97
 00B4 20909B00          lds R2,155
 00B8 27FE              sbrs R2,7
 00BA FCCF              rjmp L44
 00BC           X12:
 00BC                   .dbline 98
 00BC           ;       status = UCSR1A; //从缓冲器中获得状态、第9位及数据
 00BC 40919B00          lds R20,155
 00C0                   .dbline 99
 00C0           ;       resh = UCSR1B;
 00C0 00919A00          lds R16,154
 00C4                   .dbline 100
 00C4           ;       resl = UDR1;
 00C4 20919C00          lds R18,156
 00C8                   .dbline 101
 00C8           ;       if(status & (1<<FE1) | (1<<DOR1) | (1<<UPE1)) //如果出错, 返回-1
 00C8 842F              mov R24,R20
 00CA 8071              andi R24,16
 00CC 8C60              ori R24,12
 00CE 19F0              breq L47
 00D0           X13:
 00D0                   .dbline 102
 00D0           ;               return -1;
 00D0 0FEF              ldi R16,65535
 00D2 1FEF              ldi R17,255
 00D4 04C0              xjmp L43
 00D6           L47:
 00D6                   .dbline 103
 00D6           ;       resh = (resh >> 1) & 0x01; //过滤第9位数据, 然后返回
 00D6 0695              lsr R16
 00D8 0170              andi R16,1
 00DA                   .dbline 104
 00DA           ;       return ((resh << 8) | resl);
 00DA 102F              mov R17,R16
 00DC 022F              mov R16,R18
 00DE                   .dbline -2
 00DE           L43:
 00DE                   .dbline 0 ; func end
 00DE 4991              ld R20,y+
 00E0 0895              ret
 00E2                   .dbsym r resl 18 c
 00E2                   .dbsym r status 20 c
 00E2                   .dbsym r resh 16 c
 00E2                   .dbend
 00E2                   .dbfunc e USART1_Transmit_String _USART1_Transmit_String fV
 00E2           ;              p -> R20,R21
                        .even
 00E2           _USART1_Transmit_String::
 00E2 4A93              st -y,R20
 00E4 5A93              st -y,R21
 00E6 A801              movw R20,R16
 00E8                   .dbline -1
 00E8                   .dbline 109
 00E8           ; }
 00E8           ; 
 00E8           ; //USART1以5到8个数据位的方式发送字符串
 00E8           ; void USART1_Transmit_String(unsigned char *p)
 00E8           ; {
 00E8 05C0              xjmp L51
 00EA           L50:
 00EA                   .dbline 111
 00EA           ;     while(*p)
 00EA           ;     {
 00EA                   .dbline 112
 00EA           ;         USART1_Transmit(*p);
 00EA FA01              movw R30,R20
 00EC 0081              ldd R16,z+0
 00EE C0DF              xcall _USART1_Transmit
 00F0                   .dbline 113
 00F0           ;         p++;
 00F0 4F5F              subi R20,255  ; offset = 1
 00F2 5F4F              sbci R21,255
 00F4                   .dbline 114
 00F4           ;     }
 00F4           L51:
 00F4                   .dbline 110
 00F4 FA01              movw R30,R20
 00F6 2080              ldd R2,z+0
 00F8 2220              tst R2
 00FA B9F7              brne L50
 00FC           X14:
 00FC                   .dbline -2
 00FC           L49:
 00FC                   .dbline 0 ; func end
 00FC 5991              ld R21,y+
 00FE 4991              ld R20,y+
 0100 0895              ret
 0102                   .dbsym r p 20 pc
 0102                   .dbend
 0102                   .dbfunc e USART1_Flush _USART1_Flush fV
 0102           ;          dummy -> R16
                        .even
 0102           _USART1_Flush::
 0102                   .dbline -1
 0102                   .dbline 119
 0102           ; }
 0102           ; 
 0102           ; //USART1刷新接收缓冲器
 0102           ; void USART1_Flush(void)
 0102           ; {
 0102 02C0              xjmp L55
 0104           L54:
 0104                   .dbline 122
 0104           ;       unsigned char dummy;
 0104           ;       while(UCSR1A & (1<<RXC1))
 0104           ;               dummy = UDR1;
 0104 00919C00          lds R16,156
 0108           L55:
 0108                   .dbline 121
 0108 20909B00          lds R2,155
 010C 27FC              sbrc R2,7
 010E FACF              rjmp L54
 0110           X15:
 0110                   .dbline -2
 0110           L53:
 0110                   .dbline 0 ; func end
 0110 0895              ret
 0112                   .dbsym r dummy 16 c
 0112                   .dbend
 0112           ; }
