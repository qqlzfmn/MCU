                        .module USART_Operate.c
                        .area text(rom, con, rel)
 0000                   .dbfile USART_Operate.c
 0000                   .dbfile F:\工作\单片机\WorkSpace\AccessControlSystem\USART_Operate.c
 0000                   .dbfunc e USART0_Init _USART0_Init fV
 0000           ;           ubrr -> R16,R17
                        .even
 0000           _USART0_Init::
 0000                   .dbline -1
 0000                   .dbline 11
 0000           ; //USART_Operate.c
 0000           ; 
 0000           ; #include <iom128v.h>
 0000           ; #include "USART_Operate.h"
 0000           ; #include "DeviceInitialize.h"
 0000           ; 
 0000           ; /*-------------------- USART0 --------------------*/
 0000           ; 
 0000           ; //USART0初始化
 0000           ; void USART0_Init(unsigned int ubrr)
 0000           ; {
 0000                   .dbline 12
 0000           ;       UCSR0B = 0x00; //关闭收器与发送器, 等待设置波特率
 0000 2224              clr R2
 0002 2AB8              out 0xa,R2
 0004                   .dbline 13
 0004           ;       UCSR0A = 0x00; //控制和状态寄存器0A初值
 0004 2BB8              out 0xb,R2
 0006                   .dbline 14
 0006           ;       UBRR0H = (unsigned char)(ubrr>>8); //设置波特率
 0006 1801              movw R2,R16
 0008 232C              mov R2,R3
 000A 3324              clr R3
 000C 20929000          sts 144,R2
 0010                   .dbline 15
 0010           ;       UBRR0L = (unsigned char)ubrr;
 0010 09B9              out 0x9,R16
 0012                   .dbline 16
 0012           ;       UCSR0C = (0<<USBS0)|(3<<UCSZ00); //设置帧格式: 8个数据位, 1个停止位
 0012 86E0              ldi R24,6
 0014 80939500          sts 149,R24
 0018                   .dbline 17
 0018           ;       UCSR0B = (1<<RXEN0)|(1<<TXEN0); //使能接收器与发送器
 0018 88E1              ldi R24,24
 001A 8AB9              out 0xa,R24
 001C                   .dbline -2
 001C           L1:
 001C                   .dbline 0 ; func end
 001C 0895              ret
 001E                   .dbsym r ubrr 16 i
 001E                   .dbend
 001E                   .dbfunc e USART0_Transmit _USART0_Transmit fV
 001E           ;           data -> R16
                        .even
 001E           _USART0_Transmit::
 001E                   .dbline -1
 001E                   .dbline 22
 001E           ; }
 001E           ; 
 001E           ; //USART0以5到8个数据位的方式发送帧
 001E           ; void USART0_Transmit(unsigned char data)
 001E           ; {
 001E           L3:
 001E                   .dbline 23
 001E           ;       while(!(UCSR0A & (1<<UDRE0))); //等待发送缓冲器为空
 001E           L4:
 001E                   .dbline 23
 001E 5D9B              sbis 0xb,5
 0020 FECF              rjmp L3
 0022           X0:
 0022                   .dbline 24
 0022           ;       UDR0 = data; //将数据放入缓冲器, 发送数据
 0022 0CB9              out 0xc,R16
 0024                   .dbline -2
 0024           L2:
 0024                   .dbline 0 ; func end
 0024 0895              ret
 0026                   .dbsym r data 16 c
 0026                   .dbend
 0026                   .dbfunc e USART0_Transmit_9bits _USART0_Transmit_9bits fV
 0026           ;           data -> R16,R17
                        .even
 0026           _USART0_Transmit_9bits::
 0026                   .dbline -1
 0026                   .dbline 29
 0026           ; }
 0026           ; 
 0026           ; //USART0以9个数据位的方式发送帧
 0026           ; void USART0_Transmit_9bits(unsigned int data)
 0026           ; {
 0026           L7:
 0026                   .dbline 30
 0026           ;       while(!(UCSR0A & (1<<UDRE0))); //等待发送缓冲器为空
 0026           L8:
 0026                   .dbline 30
 0026 5D9B              sbis 0xb,5
 0028 FECF              rjmp L7
 002A           X1:
 002A                   .dbline 31
 002A           ;       UCSR0B &= ~(1<<TXB80); //将第9位复制到TXB8
 002A 5098              cbi 0xa,0
 002C                   .dbline 32
 002C           ;       if(data & 0x0100)
 002C 10FF              sbrs R17,0
 002E 01C0              rjmp L10
 0030           X2:
 0030                   .dbline 33
 0030           ;               UCSR0B |= (1<<TXB80);
 0030 509A              sbi 0xa,0
 0032           L10:
 0032                   .dbline 34
 0032           ;       UDR0 = data; //将数据放入缓冲器, 发送数据
 0032 0CB9              out 0xc,R16
 0034                   .dbline -2
 0034           L6:
 0034                   .dbline 0 ; func end
 0034 0895              ret
 0036                   .dbsym r data 16 i
 0036                   .dbend
 0036                   .dbfunc e USART0_Receive _USART0_Receive fc
                        .even
 0036           _USART0_Receive::
 0036                   .dbline -1
 0036                   .dbline 39
 0036           ; }
 0036           ; 
 0036           ; //USART0以5到8个数据位的方式接收帧
 0036           ; unsigned char USART0_Receive(void)
 0036           ; {
 0036           L13:
 0036                   .dbline 40
 0036           ;       while(!(UCSR0A & (1<<RXC0))); //等待接收数据
 0036           L14:
 0036                   .dbline 40
 0036 5F9B              sbis 0xb,7
 0038 FECF              rjmp L13
 003A           X3:
 003A                   .dbline 41
 003A           ;       return UDR0; //从缓冲器中获取并返回数据
 003A 0CB1              in R16,0xc
 003C                   .dbline -2
 003C           L12:
 003C                   .dbline 0 ; func end
 003C 0895              ret
 003E                   .dbend
 003E                   .dbfunc e USART0_Receive_9bits _USART0_Receive_9bits fi
 003E           ;           resl -> R18
 003E           ;         status -> R20
 003E           ;           resh -> R16
                        .even
 003E           _USART0_Receive_9bits::
 003E 4A93              st -y,R20
 0040                   .dbline -1
 0040                   .dbline 46
 0040           ; }
 0040           ; 
 0040           ; //USART0以9个数据位的方式接收帧
 0040           ; unsigned int USART0_Receive_9bits(void)
 0040           ; {
 0040           L17:
 0040                   .dbline 49
 0040           ;       unsigned char status, resh, resl;
 0040           ; 
 0040           ;       while(!(UCSR0A & (1<<RXC0))); //等待接收数据
 0040           L18:
 0040                   .dbline 49
 0040 5F9B              sbis 0xb,7
 0042 FECF              rjmp L17
 0044           X4:
 0044                   .dbline 50
 0044           ;       status = UCSR0A; //从缓冲器中获得状态、第9位及数据
 0044 4BB1              in R20,0xb
 0046                   .dbline 51
 0046           ;       resh = UCSR0B;
 0046 0AB1              in R16,0xa
 0048                   .dbline 52
 0048           ;       resl = UDR0;
 0048 2CB1              in R18,0xc
 004A                   .dbline 53
 004A           ;       if(status & (1<<FE0) | (1<<DOR0) | (1<<UPE0)) //如果出错, 返回-1
 004A 842F              mov R24,R20
 004C 8071              andi R24,16
 004E 8C60              ori R24,12
 0050 19F0              breq L20
 0052           X5:
 0052                   .dbline 54
 0052           ;               return -1;
 0052 0FEF              ldi R16,65535
 0054 1FEF              ldi R17,255
 0056 04C0              xjmp L16
 0058           L20:
 0058                   .dbline 55
 0058           ;       resh = (resh >> 1) & 0x01; //过滤第9位数据, 然后返回
 0058 0695              lsr R16
 005A 0170              andi R16,1
 005C                   .dbline 56
 005C           ;       return ((resh << 8) | resl);
 005C 102F              mov R17,R16
 005E 022F              mov R16,R18
 0060                   .dbline -2
 0060           L16:
 0060                   .dbline 0 ; func end
 0060 4991              ld R20,y+
 0062 0895              ret
 0064                   .dbsym r resl 18 c
 0064                   .dbsym r status 20 c
 0064                   .dbsym r resh 16 c
 0064                   .dbend
 0064                   .dbfunc e USART0_Transmit_String _USART0_Transmit_String fV
 0064           ;              p -> R20,R21
                        .even
 0064           _USART0_Transmit_String::
 0064 4A93              st -y,R20
 0066 5A93              st -y,R21
 0068 A801              movw R20,R16
 006A                   .dbline -1
 006A                   .dbline 61
 006A           ; }
 006A           ; 
 006A           ; //USART0以5到8个数据位的方式发送字符串
 006A           ; void USART0_Transmit_String(unsigned char *p)
 006A           ; {
 006A 05C0              xjmp L24
 006C           L23:
 006C                   .dbline 63
 006C           ;     while(*p)
 006C           ;     {
 006C                   .dbline 64
 006C           ;         USART0_Transmit(*p);
 006C FA01              movw R30,R20
 006E 0081              ldd R16,z+0
 0070 D6DF              xcall _USART0_Transmit
 0072                   .dbline 65
 0072           ;         p++;
 0072 4F5F              subi R20,255  ; offset = 1
 0074 5F4F              sbci R21,255
 0076                   .dbline 66
 0076           ;     }
 0076           L24:
 0076                   .dbline 62
 0076 FA01              movw R30,R20
 0078 2080              ldd R2,z+0
 007A 2220              tst R2
 007C B9F7              brne L23
 007E           X6:
 007E                   .dbline -2
 007E           L22:
 007E                   .dbline 0 ; func end
 007E 5991              ld R21,y+
 0080 4991              ld R20,y+
 0082 0895              ret
 0084                   .dbsym r p 20 pc
 0084                   .dbend
 0084                   .dbfunc e USART0_Flush _USART0_Flush fV
 0084           ;          dummy -> R16
                        .even
 0084           _USART0_Flush::
 0084                   .dbline -1
 0084                   .dbline 71
 0084           ; }
 0084           ; 
 0084           ; //USART0刷新接收缓冲器
 0084           ; void USART0_Flush(void)
 0084           ; {
 0084 01C0              xjmp L28
 0086           L27:
 0086                   .dbline 74
 0086           ;       unsigned char dummy;
 0086           ;       while(UCSR0A & (1<<RXC0))
 0086           ;               dummy = UDR0;
 0086 0CB1              in R16,0xc
 0088           L28:
 0088                   .dbline 73
 0088 5F99              sbic 0xb,7
 008A FDCF              rjmp L27
 008C           X7:
 008C                   .dbline -2
 008C           L26:
 008C                   .dbline 0 ; func end
 008C 0895              ret
 008E                   .dbsym r dummy 16 c
 008E                   .dbend
 008E                   .dbfunc e USART1_Init _USART1_Init fV
 008E           ;           ubrr -> R16,R17
                        .even
 008E           _USART1_Init::
 008E                   .dbline -1
 008E                   .dbline 81
 008E           ; }
 008E           ; 
 008E           ; /*-------------------- USART1 --------------------*/
 008E           ; 
 008E           ; //USART1初始化
 008E           ; void USART1_Init(unsigned int ubrr)
 008E           ; {
 008E                   .dbline 82
 008E           ;       UCSR1B = 0x00; //关闭收器与发送器, 等待设置波特率
 008E 2224              clr R2
 0090 20929A00          sts 154,R2
 0094                   .dbline 83
 0094           ;       UCSR1A = 0x00; //控制和状态寄存器1A初值
 0094 20929B00          sts 155,R2
 0098                   .dbline 84
 0098           ;       UBRR1H = (unsigned char)(ubrr>>8); //设置波特率
 0098 1801              movw R2,R16
 009A 232C              mov R2,R3
 009C 3324              clr R3
 009E 20929800          sts 152,R2
 00A2                   .dbline 85
 00A2           ;       UBRR1L = (unsigned char)ubrr;
 00A2 00939900          sts 153,R16
 00A6                   .dbline 86
 00A6           ;       UCSR1C = (0<<USBS1)|(3<<UCSZ10); //设置帧格式: 8个数据位, 1个停止位
 00A6 86E0              ldi R24,6
 00A8 80939D00          sts 157,R24
 00AC                   .dbline 87
 00AC           ;       UCSR1B = (1<<RXEN1)|(1<<TXEN1); //使能接收器与发送器
 00AC 88E1              ldi R24,24
 00AE 80939A00          sts 154,R24
 00B2                   .dbline -2
 00B2           L30:
 00B2                   .dbline 0 ; func end
 00B2 0895              ret
 00B4                   .dbsym r ubrr 16 i
 00B4                   .dbend
 00B4                   .dbfunc e USART1_Transmit _USART1_Transmit fV
 00B4           ;           data -> R16
                        .even
 00B4           _USART1_Transmit::
 00B4                   .dbline -1
 00B4                   .dbline 92
 00B4           ; }
 00B4           ; 
 00B4           ; //USART1以5到8个数据位的方式发送帧
 00B4           ; void USART1_Transmit(unsigned char data)
 00B4           ; {
 00B4           L32:
 00B4                   .dbline 93
 00B4           ;       while(!(UCSR1A & (1<<UDRE1))); //等待发送缓冲器为空
 00B4           L33:
 00B4                   .dbline 93
 00B4 20909B00          lds R2,155
 00B8 25FE              sbrs R2,5
 00BA FCCF              rjmp L32
 00BC           X8:
 00BC                   .dbline 94
 00BC           ;       UDR1 = data; //将数据放入缓冲器, 发送数据
 00BC 00939C00          sts 156,R16
 00C0                   .dbline -2
 00C0           L31:
 00C0                   .dbline 0 ; func end
 00C0 0895              ret
 00C2                   .dbsym r data 16 c
 00C2                   .dbend
 00C2                   .dbfunc e USART1_Transmit_9bits _USART1_Transmit_9bits fV
 00C2           ;           data -> R16,R17
                        .even
 00C2           _USART1_Transmit_9bits::
 00C2                   .dbline -1
 00C2                   .dbline 99
 00C2           ; }
 00C2           ; 
 00C2           ; //USART1以9个数据位的方式发送帧
 00C2           ; void USART1_Transmit_9bits(unsigned int data)
 00C2           ; {
 00C2           L36:
 00C2                   .dbline 100
 00C2           ;       while(!(UCSR1A & (1<<UDRE1))); //等待发送缓冲器为空
 00C2           L37:
 00C2                   .dbline 100
 00C2 20909B00          lds R2,155
 00C6 25FE              sbrs R2,5
 00C8 FCCF              rjmp L36
 00CA           X9:
 00CA                   .dbline 101
 00CA           ;       UCSR1B &= ~(1<<TXB81); //将第9位复制到TXB8
 00CA 80919A00          lds R24,154
 00CE 8E7F              andi R24,254
 00D0 80939A00          sts 154,R24
 00D4                   .dbline 102
 00D4           ;       if(data & 0x0100)
 00D4 10FF              sbrs R17,0
 00D6 05C0              rjmp L39
 00D8           X10:
 00D8                   .dbline 103
 00D8           ;               UCSR1B |= (1<<TXB81);
 00D8 80919A00          lds R24,154
 00DC 8160              ori R24,1
 00DE 80939A00          sts 154,R24
 00E2           L39:
 00E2                   .dbline 104
 00E2           ;       UDR1 = data; //将数据放入缓冲器, 发送数据
 00E2 00939C00          sts 156,R16
 00E6                   .dbline -2
 00E6           L35:
 00E6                   .dbline 0 ; func end
 00E6 0895              ret
 00E8                   .dbsym r data 16 i
 00E8                   .dbend
 00E8                   .dbfunc e USART1_Receive _USART1_Receive fc
                        .even
 00E8           _USART1_Receive::
 00E8                   .dbline -1
 00E8                   .dbline 109
 00E8           ; }
 00E8           ; 
 00E8           ; //USART1以5到8个数据位的方式接收帧
 00E8           ; unsigned char USART1_Receive(void)
 00E8           ; {
 00E8           L42:
 00E8                   .dbline 110
 00E8           ;       while(!(UCSR1A & (1<<RXC1))); //等待接收数据
 00E8           L43:
 00E8                   .dbline 110
 00E8 20909B00          lds R2,155
 00EC 27FE              sbrs R2,7
 00EE FCCF              rjmp L42
 00F0           X11:
 00F0                   .dbline 111
 00F0           ;       return UDR1; //从缓冲器中获取并返回数据
 00F0 00919C00          lds R16,156
 00F4                   .dbline -2
 00F4           L41:
 00F4                   .dbline 0 ; func end
 00F4 0895              ret
 00F6                   .dbend
 00F6                   .dbfunc e USART1_Receive_9bits _USART1_Receive_9bits fi
 00F6           ;           resl -> R18
 00F6           ;         status -> R20
 00F6           ;           resh -> R16
                        .even
 00F6           _USART1_Receive_9bits::
 00F6 4A93              st -y,R20
 00F8                   .dbline -1
 00F8                   .dbline 116
 00F8           ; }
 00F8           ; 
 00F8           ; //USART1以9个数据位的方式接收帧
 00F8           ; unsigned int USART1_Receive_9bits(void)
 00F8           ; {
 00F8           L46:
 00F8                   .dbline 119
 00F8           ;       unsigned char status, resh, resl;
 00F8           ; 
 00F8           ;       while(!(UCSR1A & (1<<RXC1))); //等待接收数据
 00F8           L47:
 00F8                   .dbline 119
 00F8 20909B00          lds R2,155
 00FC 27FE              sbrs R2,7
 00FE FCCF              rjmp L46
 0100           X12:
 0100                   .dbline 120
 0100           ;       status = UCSR1A; //从缓冲器中获得状态、第9位及数据
 0100 40919B00          lds R20,155
 0104                   .dbline 121
 0104           ;       resh = UCSR1B;
 0104 00919A00          lds R16,154
 0108                   .dbline 122
 0108           ;       resl = UDR1;
 0108 20919C00          lds R18,156
 010C                   .dbline 123
 010C           ;       if(status & (1<<FE1) | (1<<DOR1) | (1<<UPE1)) //如果出错, 返回-1
 010C 842F              mov R24,R20
 010E 8071              andi R24,16
 0110 8C60              ori R24,12
 0112 19F0              breq L49
 0114           X13:
 0114                   .dbline 124
 0114           ;               return -1;
 0114 0FEF              ldi R16,65535
 0116 1FEF              ldi R17,255
 0118 04C0              xjmp L45
 011A           L49:
 011A                   .dbline 125
 011A           ;       resh = (resh >> 1) & 0x01; //过滤第9位数据, 然后返回
 011A 0695              lsr R16
 011C 0170              andi R16,1
 011E                   .dbline 126
 011E           ;       return ((resh << 8) | resl);
 011E 102F              mov R17,R16
 0120 022F              mov R16,R18
 0122                   .dbline -2
 0122           L45:
 0122                   .dbline 0 ; func end
 0122 4991              ld R20,y+
 0124 0895              ret
 0126                   .dbsym r resl 18 c
 0126                   .dbsym r status 20 c
 0126                   .dbsym r resh 16 c
 0126                   .dbend
 0126                   .dbfunc e USART1_Transmit_String _USART1_Transmit_String fV
 0126           ;              p -> R20,R21
                        .even
 0126           _USART1_Transmit_String::
 0126 4A93              st -y,R20
 0128 5A93              st -y,R21
 012A A801              movw R20,R16
 012C                   .dbline -1
 012C                   .dbline 131
 012C           ; }
 012C           ; 
 012C           ; //USART1以5到8个数据位的方式发送字符串
 012C           ; void USART1_Transmit_String(unsigned char *p)
 012C           ; {
 012C 05C0              xjmp L53
 012E           L52:
 012E                   .dbline 133
 012E           ;     while(*p)
 012E           ;     {
 012E                   .dbline 134
 012E           ;         USART1_Transmit(*p);
 012E FA01              movw R30,R20
 0130 0081              ldd R16,z+0
 0132 C0DF              xcall _USART1_Transmit
 0134                   .dbline 135
 0134           ;         p++;
 0134 4F5F              subi R20,255  ; offset = 1
 0136 5F4F              sbci R21,255
 0138                   .dbline 136
 0138           ;     }
 0138           L53:
 0138                   .dbline 132
 0138 FA01              movw R30,R20
 013A 2080              ldd R2,z+0
 013C 2220              tst R2
 013E B9F7              brne L52
 0140           X14:
 0140                   .dbline -2
 0140           L51:
 0140                   .dbline 0 ; func end
 0140 5991              ld R21,y+
 0142 4991              ld R20,y+
 0144 0895              ret
 0146                   .dbsym r p 20 pc
 0146                   .dbend
 0146                   .dbfunc e USART1_Flush _USART1_Flush fV
 0146           ;          dummy -> R16
                        .even
 0146           _USART1_Flush::
 0146                   .dbline -1
 0146                   .dbline 141
 0146           ; }
 0146           ; 
 0146           ; //USART1刷新接收缓冲器
 0146           ; void USART1_Flush(void)
 0146           ; {
 0146 02C0              xjmp L57
 0148           L56:
 0148                   .dbline 144
 0148           ;       unsigned char dummy;
 0148           ;       while(UCSR1A & (1<<RXC1))
 0148           ;               dummy = UDR1;
 0148 00919C00          lds R16,156
 014C           L57:
 014C                   .dbline 143
 014C 20909B00          lds R2,155
 0150 27FC              sbrc R2,7
 0152 FACF              rjmp L56
 0154           X15:
 0154                   .dbline -2
 0154           L55:
 0154                   .dbline 0 ; func end
 0154 0895              ret
 0156                   .dbsym r dummy 16 c
 0156                   .dbend
 0156           ; }
