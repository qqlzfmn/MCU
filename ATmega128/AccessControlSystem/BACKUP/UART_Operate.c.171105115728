//UART_Operate.c

#include "UART_Operate.h"

//USART初始化
void USART_Init(unsigned int ubrr)
{
	UBRRH = (unsigned char)(ubrr>>8); //设置波特率
	UBRRL = (unsigned char)ubrr;
	UCSRB = (1<<RXEN)|(1<<TXEN); //使能接收器与发送器
	UCSRC = (1<<USBS)|(3<<UCSZ0); //设置帧格式: 8个数据位, 2个停止位
}

//以5到8个数据位的方式发送帧
void USART_Transmit(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE))); //等待发送缓冲器为空
	UDR = data; //将数据放入缓冲器, 发送数据
}

//以9个数据位的方式发送帧
void USART_Transmit_9bits(unsigned int data)
{
	while(!( UCSRA & (1<<UDRE)))); //等待发送缓冲器为空
	UCSRB &= ~(1<<TXB8); //将第9位复制到TXB8
	if(data & 0x0100)
		UCSRB |= (1<<TXB8);
	UDR = data; //将数据放入缓冲器, 发送数据
}

//以5到8个数据位的方式接收帧
unsigned char USART_Receive(void)
{
	while(!(UCSRA & (1<<RXC))); //等待接收数据
	return UDR; //从缓冲器中获取并返回数据
}

//以9个数据位的方式接收帧
unsigned int USART_Receive_9bits(void)
{
	unsigned char status, resh, resl;

	while(!(UCSRA & (1<<RXC))); //等待接收数据
	status = UCSRA; //从缓冲器中获得状态、第9位及数据
	resh = UCSRB;
	resl = UDR;
	if(status & (1<<FE) | (1<<DOR) | (1<<UPE)) //如果出错, 返回-1
		return -1;
	resh = (resh >> 1) & 0x01; //过滤第9位数据, 然后返回
	return ((resh << 8) | resl);
}

//刷新接收缓冲器
void USART_Flush(void)
{
	unsigned char dummy;
	while(UCSRA & (1<<RXC))
		dummy = UDR;
}
