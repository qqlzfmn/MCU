                        .module finger.c
                        .area text(rom, con, rel)
 0000                   .dbfile finger.c
 0000                   .dbfile F:\工作\单片机\WorkSpace\finger\finger.c
 0000                   .dbfunc e port_init _port_init fV
                        .even
 0000           _port_init::
 0000                   .dbline -1
 0000                   .dbline 16
 0000           ; //ICC-AVR application builder : 17/10/31 16:00:25
 0000           ; // Target : M128
 0000           ; // Crystal: 11.0592Mhz
 0000           ; 
 0000           ; #include <iom128v.h>
 0000           ; #include <macros.h>
 0000           ; 
 0000           ; #define FOSC 11059200// Clock Speed
 0000           ; #define BAUD 115200
 0000           ; #define MYUBRR FOSC/16/BAUD-1
 0000           ; 
 0000           ; #define uint unsigned int
 0000           ; #define uchar unsigned char
 0000           ; 
 0000           ; void port_init(void)
 0000           ; {
 0000                   .dbline 17
 0000           ;       PORTA = 0x00;
 0000 2224              clr R2
 0002 2BBA              out 0x1b,R2
 0004                   .dbline 18
 0004           ;       DDRA  = 0x00;
 0004 2ABA              out 0x1a,R2
 0006                   .dbline 19
 0006           ;       PORTB = 0x00;
 0006 28BA              out 0x18,R2
 0008                   .dbline 20
 0008           ;       DDRB  = 0x00;
 0008 27BA              out 0x17,R2
 000A                   .dbline -2
 000A           L1:
 000A                   .dbline 0 ; func end
 000A 0895              ret
 000C                   .dbend
 000C                   .dbfunc e uart0_init _uart0_init fV
 000C           ;           ubrr -> R16,R17
                        .even
 000C           _uart0_init::
 000C                   .dbline -1
 000C                   .dbline 29
 000C           ; }
 000C           ; 
 000C           ; //UART0 initialize
 000C           ; // desired baud rate: 57600
 000C           ; // actual: baud rate:57600 (0.0%)
 000C           ; // char size: 8 bit
 000C           ; // parity: Disabled
 000C           ; void uart0_init(unsigned int ubrr)
 000C           ; {
 000C                   .dbline 31
 000C           ;       /* Set baud rate */
 000C           ;       UBRR0H = (unsigned char)(ubrr>>8);
 000C 1801              movw R2,R16
 000E 232C              mov R2,R3
 0010 3324              clr R3
 0012 20929000          sts 144,R2
 0016                   .dbline 32
 0016           ;       UBRR0L = (unsigned char)ubrr;
 0016 09B9              out 0x9,R16
 0018                   .dbline 34
 0018           ;       /* Enable receiver and transmitter */
 0018           ;       UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 0018 88E1              ldi R24,24
 001A 8AB9              out 0xa,R24
 001C                   .dbline 36
 001C           ;       /* Set frame format: 8data, 2stop bit */
 001C           ;       UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 001C 8EE0              ldi R24,14
 001E 80939500          sts 149,R24
 0022                   .dbline -2
 0022           L2:
 0022                   .dbline 0 ; func end
 0022 0895              ret
 0024                   .dbsym r ubrr 16 i
 0024                   .dbend
 0024                   .dbfunc e uart0_send_char _uart0_send_char fV
 0024           ;           data -> R16
                        .even
 0024           _uart0_send_char::
 0024                   .dbline -1
 0024                   .dbline 40
 0024           ; }
 0024           ; 
 0024           ; void uart0_send_char(uchar data)
 0024           ; {
 0024           L4:
 0024                   .dbline 41
 0024           ;       while(!(UCSR0A & (1<<UDRE0)));
 0024           L5:
 0024                   .dbline 41
 0024 5D9B              sbis 0xb,5
 0026 FECF              rjmp L4
 0028           X0:
 0028                   .dbline 43
 0028           ;       
 0028           ;       UDR0 = data;
 0028 0CB9              out 0xc,R16
 002A                   .dbline -2
 002A           L3:
 002A                   .dbline 0 ; func end
 002A 0895              ret
 002C                   .dbsym r data 16 c
 002C                   .dbend
 002C                   .dbfunc e uart0_send_string _uart0_send_string fV
 002C           ;              p -> R20,R21
                        .even
 002C           _uart0_send_string::
 002C 4A93              st -y,R20
 002E 5A93              st -y,R21
 0030 A801              movw R20,R16
 0032                   .dbline -1
 0032                   .dbline 47
 0032           ; }
 0032           ; 
 0032           ; void uart0_send_string(uchar *p)
 0032           ; {
 0032 05C0              xjmp L9
 0034           L8:
 0034                   .dbline 49
 0034           ;     while(*p)
 0034           ;     {
 0034                   .dbline 50
 0034           ;         uart0_send_char(*p);
 0034 FA01              movw R30,R20
 0036 0081              ldd R16,z+0
 0038 F5DF              xcall _uart0_send_char
 003A                   .dbline 51
 003A           ;         p++;
 003A 4F5F              subi R20,255  ; offset = 1
 003C 5F4F              sbci R21,255
 003E                   .dbline 52
 003E           ;     }
 003E           L9:
 003E                   .dbline 48
 003E FA01              movw R30,R20
 0040 2080              ldd R2,z+0
 0042 2220              tst R2
 0044 B9F7              brne L8
 0046           X1:
 0046                   .dbline -2
 0046           L7:
 0046                   .dbline 0 ; func end
 0046 5991              ld R21,y+
 0048 4991              ld R20,y+
 004A 0895              ret
 004C                   .dbsym r p 20 pc
 004C                   .dbend
 004C                   .dbfunc e lcd_bz _lcd_bz fi
                        .even
 004C           _lcd_bz::
 004C                   .dbline -1
 004C                   .dbline 56
 004C           ; }
 004C           ; 
 004C           ; uint lcd_bz()
 004C           ; {
 004C                   .dbline 57
 004C           ;       PORTA = 0x00;
 004C 2224              clr R2
 004E 2BBA              out 0x1b,R2
 0050                   .dbline 58
 0050           ;       DDRA  = 0x00;
 0050 2ABA              out 0x1a,R2
 0052                   .dbline 59
 0052           ;       if(PINA&BIT(4))
 0052 CC9B              sbis 0x19,4
 0054 03C0              rjmp L12
 0056           X2:
 0056                   .dbline 60
 0056           ;               return 1;
 0056 01E0              ldi R16,1
 0058 10E0              ldi R17,0
 005A 02C0              xjmp L11
 005C           L12:
 005C                   .dbline 62
 005C           ;       else
 005C           ;               return 0;
 005C 0027              clr R16
 005E 1127              clr R17
 0060                   .dbline -2
 0060           L11:
 0060                   .dbline 0 ; func end
 0060 0895              ret
 0062                   .dbend
 0062                   .dbfunc e delay _delay fV
 0062           ;              i -> R20,R21
 0062           ;             ms -> R16,R17
                        .even
 0062           _delay::
 0062 4A93              st -y,R20
 0064 5A93              st -y,R21
 0066                   .dbline -1
 0066                   .dbline 66
 0066           ; }
 0066           ; 
 0066           ; void delay(uint ms)
 0066           ; {
 0066                   .dbline 68
 0066           ;       uint i;
 0066           ;       for(ms;ms>0;ms--)
 0066 0AC0              xjmp L18
 0068           L15:
 0068                   .dbline 69
 0068           ;               for(i=1200;i>0;i--);
 0068 40EB              ldi R20,1200
 006A 54E0              ldi R21,4
 006C 02C0              xjmp L22
 006E           L19:
 006E                   .dbline 69
 006E           L20:
 006E                   .dbline 69
 006E 4150              subi R20,1
 0070 5040              sbci R21,0
 0072           L22:
 0072                   .dbline 69
 0072 4030              cpi R20,0
 0074 4507              cpc R20,R21
 0076 D9F7              brne L19
 0078           X3:
 0078           L16:
 0078                   .dbline 68
 0078 0150              subi R16,1
 007A 1040              sbci R17,0
 007C           L18:
 007C                   .dbline 68
 007C 0030              cpi R16,0
 007E 0107              cpc R16,R17
 0080 99F7              brne L15
 0082           X4:
 0082                   .dbline -2
 0082           L14:
 0082                   .dbline 0 ; func end
 0082 5991              ld R21,y+
 0084 4991              ld R20,y+
 0086 0895              ret
 0088                   .dbsym r i 20 i
 0088                   .dbsym r ms 16 i
 0088                   .dbend
                        .area vector(rom, abs)
                        .org 72
 0048 0C944400          jmp _uart0_rx_isr
                        .area text(rom, con, rel)
 0088                   .dbfile F:\工作\单片机\WorkSpace\finger\finger.c
 0088                   .dbfunc e uart0_rx_isr _uart0_rx_isr fV
                        .even
 0088           _uart0_rx_isr::
 0088                   .dbline -1
 0088                   .dbline 74
 0088           ; }
 0088           ; 
 0088           ; #pragma interrupt_handler uart0_rx_isr:iv_USART0_RXC
 0088           ; void uart0_rx_isr(void)
 0088           ; {
 0088                   .dbline -2
 0088           L23:
 0088                   .dbline 0 ; func end
 0088 1895              reti
 008A                   .dbend
                        .area vector(rom, abs)
                        .org 76
 004C 0C944500          jmp _uart0_udre_isr
                        .area text(rom, con, rel)
 008A                   .dbfile F:\工作\单片机\WorkSpace\finger\finger.c
 008A                   .dbfunc e uart0_udre_isr _uart0_udre_isr fV
                        .even
 008A           _uart0_udre_isr::
 008A                   .dbline -1
 008A                   .dbline 80
 008A           ;       //uart has received a character in UDR
 008A           ; }
 008A           ; 
 008A           ; #pragma interrupt_handler uart0_udre_isr:iv_USART0_UDRE
 008A           ; void uart0_udre_isr(void)
 008A           ; {
 008A                   .dbline -2
 008A           L24:
 008A                   .dbline 0 ; func end
 008A 1895              reti
 008C                   .dbend
                        .area vector(rom, abs)
                        .org 80
 0050 0C944600          jmp _uart0_tx_isr
                        .area text(rom, con, rel)
 008C                   .dbfile F:\工作\单片机\WorkSpace\finger\finger.c
 008C                   .dbfunc e uart0_tx_isr _uart0_tx_isr fV
                        .even
 008C           _uart0_tx_isr::
 008C                   .dbline -1
 008C                   .dbline 86
 008C           ;       //character transferred to shift register so UDR is now empty
 008C           ; }
 008C           ; 
 008C           ; #pragma interrupt_handler uart0_tx_isr:iv_USART0_TXC
 008C           ; void uart0_tx_isr(void)
 008C           ; {
 008C                   .dbline -2
 008C           L25:
 008C                   .dbline 0 ; func end
 008C 1895              reti
 008E                   .dbend
 008E                   .dbfunc e init_devices _init_devices fV
                        .even
 008E           _init_devices::
 008E                   .dbline -1
 008E                   .dbline 92
 008E           ;       //character has been transmitted
 008E           ; }
 008E           ; 
 008E           ; //call this routine to initialize all peripherals
 008E           ; void init_devices(void)
 008E           ; {
 008E                   .dbline 94
 008E           ;       //stop errant interrupts until set up
 008E           ;       CLI(); //disable all interrupts
 008E F894              cli
 0090                   .dbline 95
 0090           ;       XDIV  = 0x00; //xtal divider
 0090 2224              clr R2
 0092 2CBE              out 0x3c,R2
 0094                   .dbline 96
 0094           ;       XMCRA = 0x00; //external memory
 0094 20926D00          sts 109,R2
 0098                   .dbline 97
 0098           ;       port_init();
 0098 B3DF              xcall _port_init
 009A                   .dbline 98
 009A           ;       uart0_init(MYUBRR);
 009A 05E0              ldi R16,5
 009C 10E0              ldi R17,0
 009E B6DF              xcall _uart0_init
 00A0                   .dbline 100
 00A0           ; 
 00A0           ;       MCUCR = 0x00;
 00A0 2224              clr R2
 00A2 25BE              out 0x35,R2
 00A4                   .dbline 101
 00A4           ;       EICRA = 0x00; //extended ext ints
 00A4 20926A00          sts 106,R2
 00A8                   .dbline 102
 00A8           ;       EICRB = 0x00; //extended ext ints
 00A8 2ABE              out 0x3a,R2
 00AA                   .dbline 103
 00AA           ;       EIMSK = 0x00;
 00AA 29BE              out 0x39,R2
 00AC                   .dbline 104
 00AC           ;       TIMSK = 0x00; //timer interrupt sources
 00AC 27BE              out 0x37,R2
 00AE                   .dbline 105
 00AE           ;       ETIMSK = 0x00; //extended timer interrupt sources
 00AE 20927D00          sts 125,R2
 00B2                   .dbline 106
 00B2           ;       SEI(); //re-enable interrupts
 00B2 7894              sei
 00B4                   .dbline -2
 00B4           L26:
 00B4                   .dbline 0 ; func end
 00B4 0895              ret
 00B6                   .dbend
 00B6                   .dbfunc e main _main fV
                        .even
 00B6           _main::
 00B6                   .dbline -1
 00B6                   .dbline 112
 00B6           ;       //all peripherals are now initialized
 00B6           ; }
 00B6           ; 
 00B6           ; //
 00B6           ; void main(void)
 00B6           ; {
 00B6                   .dbline 113
 00B6           ;       init_devices();
 00B6 EBDF              xcall _init_devices
 00B8           L28:
 00B8                   .dbline 116
 00B8           ;       //insert your functional code here...
 00B8           ;       //delay(1000);
 00B8           ;       while(lcd_bz());
 00B8           L29:
 00B8                   .dbline 116
 00B8 C9DF              xcall _lcd_bz
 00BA 0030              cpi R16,0
 00BC 0107              cpc R16,R17
 00BE E1F7              brne L28
 00C0           X5:
 00C0                   .dbline 117
 00C0           ;       uart0_send_string("CLS(0);DS32(0,50,'实验室门禁系统',1);DS16(65,100,'显示模块测试',2);");
 00C0 00E0              ldi R16,<L31
 00C2 10E0              ldi R17,>L31
 00C4 B3DF              xcall _uart0_send_string
 00C6           L32:
 00C6                   .dbline 120
 00C6           ;       //uart0_send_string("CLS(0);BOX(0,0,219,175,15);BOX(1,1,218,174,0);BOXF(2,2,217,17,3);PL(2,18,218,18,0);SBC(3);DS12(40,4,'菜单演示界面',15);SBC(0);PIC(20,40,1);DS12(25,75,'电压',7);PIC(70,40,2);DS12(75,75,'电流',7);PIC(120,40,3);DS12(125,75,'充电',7);PIC(170,40,4);DS12(175,75,'输入',7);PIC(20,110,5);DS12(25,145,'输出',7);PIC(70,110,6);DS12(75,145,'测试',7);PIC(120,110,7);DS12(125,145,'关闭',7);PIC(170,110,8);DS12(175,145,'设置',7);");
 00C6           ;       //uart0_send_string("DR0;CLS(0);DS16(30,2,'Usart-GPU  串口液晶屏 ',2);PL(0,20,220,20,4);SNF(10,22);DS16(10,50,'出品:APACHECTL',13);DS16(10,72,'网站:http://www.A-DIY.cn',13);BS12(10,100,210,4,'　本页面可自由由上位机软件定义，具体资料以及程序请去网站下载。',15);BS12(10,140,210,4,'　静等10秒，演示开始；此间如有串口命令，则自动进入命令处理状态。',15);");
 00C6           ;       while(1);
 00C6           L33:
 00C6                   .dbline 120
 00C6 FFCF              xjmp L32
 00C8           X6:
 00C8                   .dbline -2
 00C8           L27:
 00C8                   .dbline 0 ; func end
 00C8 0895              ret
 00CA                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile F:\工作\单片机\WorkSpace\finger\finger.c
 0000           L31:
 0000                   .blkb 68
                        .area idata
 0000 434C532830293B4453333228302C3530  .byte 'C,'L,'S,40,48,41,59,'D,'S,51,50,40,48,44,53,48
 0010 2C27CAB5D1E9CAD2C3C5BDFBCFB5CDB3  .byte 44,39,202,181,209,233,202,210,195,197,189,251,207,181,205,179
 0020 272C31293B445331362836352C313030  .byte 39,44,49,41,59,'D,'S,49,54,40,54,53,44,49,48,48
 0030 2C27CFD4CABEC4A3BFE9B2E2CAD4272C  .byte 44,39,207,212,202,190,196,163,191,233,178,226,202,212,39,44
 0040 32293B00          .byte 50,41,59,0
                        .area data(ram, con, rel)
 0044                   .dbfile F:\工作\单片机\WorkSpace\finger\finger.c
 0044           ; }
 0044           ; 
